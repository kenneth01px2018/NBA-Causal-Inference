How the NBA Draft Impacts the Length of NBA Careers
========================================================
author: Kenneth (Hsuan An) Chen
date: February 13, 2022
autosize: true

Introduction: The NBA Draft
========================================================

![NBA Draft 2021](./Images/nbadraft.jpeg)

***
- Introduced in 1947
- A way to induct new players into the NBA
- Since 1989, the draft consists of two round (30 picks each)
- Each team takes turns picking a player to join their team
- Each player may only enter the draft once
- The earlier the pick, (usually) the better the player

The NBA Combine
========================================================

![NBA Combine](./Images/nbacombine.jpeg)

***
- Not sure when it was introduced, but data starts in 2001
- Before the draft, prospective players are invited to the combine
- Invitations are determined by votes from each NBA team
- Combine consists of various physical tests and skill tests
- Allows for prospects to showcase their abilities prior to the draft

The Causal DAG
========================================================

![Causal DAG](./Images/CausalDAG.jpg)

***
- Covariates: the results from the combine tests
- Treatment: NBA Draft round (1 - first round, 0 - second round or undrafted)
- Outcome: Number of years played in the NBA
- It should be noted that hidden bias is very likely here

Research Question
========================================================

Do the players that are drafted in the first round play longer in the NBA?

![Meme](./Images/meme.jpeg)

The Data: Kaggle
========================================================

![Raiden](./Images/raiden.png)

***
- Downloaded from Kaggle
- Collection of data sets wrangled from stats.nba.com
- sqlite file
- Data sets used: Player_Attributes and DRAFT_COMBINE
- Player_Attributes: country, school, weight, seasons played, draft round/year, pts, etc
- DRAFT_COMBINE: test results from the draft combine


Draft Combine Data Set
========================================================

```{r, echo = F}
library(RSQLite)
library(tidyverse)
library(tableone)
library(Matching)
library(ipw) 
library(survey)
library(MatchIt)
library(imputeTS)
library(caret)
library(VIM)
library(laeken)
library(gbm)
library(sensitivityfull)
library(knitr)
# Connect to db
con <- dbConnect(drv = RSQLite::SQLite(), dbname = "/Users/kenneth01px2018/Desktop/Stats Courses/Winter 22/STATS 199/Causal Inference/Data/archive/basketball.sqlite")

# List all tables
tables <- dbListTables(con)

# Exclude sqlite_sequence (contains table information)
tables <- tables[tables != "sqlite_sequence"]

lDataFrames <- vector("list", length=length(tables))

# Create a data.frame for each table
for (i in seq(along=tables)) {
  lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste("SELECT * FROM '", tables[[i]], "'", sep=""))
}

# Label each data frame
names(lDataFrames) <- tables
combine <- lDataFrames$Draft_Combine
player_attributes <- lDataFrames$Player_Attributes
desired_cols <- c(colnames(player_attributes)[2:4], "SEASON_EXP", "DRAFT_ROUND")
```

```{r}
dim(combine)
combine[1:5, 4:8]
```

Player Attributes Data Set
========================================================

```{r}
dim(player_attributes)
player_attributes[1:5, desired_cols]
```

Pre-joining Analysis (Part 1)
========================================================

```{r}
# Convert start year to numeric and find number of players that started after 2000
from_yrs <- as.numeric(player_attributes$FROM_YEAR)
sum(from_yrs > 2000)

# Check for missing values in treatment and outcome variables
!sum(is.na(player_attributes$SEASON_EXP)) & !sum(is.na(player_attributes$DRAFT_ROUND))
```

Pre-joining Analysis (Part 2)
========================================================

```{r}
# Keep columns of interest, and players that started after 2000
temp <- player_attributes[from_yrs > 2000, c("SEASON_EXP", "DRAFT_ROUND")]
temp$namePlayer <- player_attributes$DISPLAY_FIRST_LAST[from_yrs > 2000]
dim(temp)
sum(combine$namePlayer %in% temp$namePlayer)
sum(temp$namePlayer %in% combine$namePlayer)
```

Pre-joining Analysis (Summary)
========================================================

- 1517 players started playing after 2000 (1395 players in combine data)
- No missing values in treatment and outcome variables
- Only keep players that started after 2000 to minimize chances of duplicate names when joining data sets
- Example: Mike Dunleavy Sr. and Mike Dunleavy Jr. (father and son)
- 849 players that participated in the combine played in the NBA
- 838 NBA players participated in the combine

Joining the Data Sets
========================================================

- Players could participate in the combine without ever playing in the NBA
- Players could play in the NBA without ever participating in the combine
- We want players that have participated in the combine AND played in the NBA
- Solution: inner-join
- Result: 852 observations (due to duplicates in both data sets)
- Quality checked by randomly drawing sample from joined data set

Joining the Data Sets (R Code)
========================================================

```{r}
# Inner-join data frames
joined <- inner_join(combine, temp, by = "namePlayer")
dim(joined)
# Check for missing values
sum(is.na(joined$SEASON_EXP))
sum(is.na(joined$DRAFT_ROUND))
```

Missing Values
========================================================

```{r, echo = F}
missing_prop <- sapply(joined, function(x) {sum(is.na(x)) / nrow(joined)})
hist(missing_prop, main = "Distribution of Missingness", xlab = "Proportion of Missing Values in a Variable")
# Find number of features with missingness <= 40%
print(paste("Number of variables with over 40% missing:", sum(missing_prop > 0.4)))
```

***
- 95 have over 40% of their values missing (out of 118)
- May be due to the fact most tests are not even attempted by the players
- Example: setOffDribTopKeyCollegeMade (> 97.5% missing) 
- Some variables are redundant (i.e. heightWOShoes and heightWOShoesInches)
- Some variables provide no information (i.e. IDs and names)

Missing Values (R Code)
========================================================

```{r}
# Remove columns with missingness >= 40%
df <- joined[, missing_prop < 0.4]
dim(df)
# Remove irrelevant columns
df <- df %>% 
  dplyr::select(-nameFirst, -namePlayer, -nameLast, -idPlayer, -heightWOShoes, -wingspan, -reachStandingO, -heightWShoes)
dim(df)
```

Feature Engineering
========================================================

- Binary encode DRAFT_ROUND (1 = 1st round, 0 = 2nd round or undrafted)
- Ordinal encode slugPosition as new column position
- heightWShoesInches has 16% of its values missing (128 consecutive missing values to start)
- heightWShoesInches highly correlated with heightWOShoesInches (0.9% missing)
- Remove heightWShoesInches along with yearCombine and slugPosition

Feature Engineering (R Code)
========================================================

```{r}
# Convert draft round column to binary treatment variable (1 = 1st round, 0 = 2nd round/undrafted)
df$DRAFT_ROUND <- ifelse(df$DRAFT_ROUND == "1", 1, 0)
# Ordinal encode positions
position <- as.numeric(as.factor(df$slugPosition))
df$position <- position
# Remove columns from df
df$yearCombine <- NULL
df$slugPosition <- NULL
df$heightWShoesInches <- NULL
dim(df)
```

Impute with KNN
========================================================

```{r}
# Impute missing values with KNN
imputed <- kNN(
  df, k = 3, numFun = weightedMean, 
  weightDist=TRUE
)
dim(imputed)
# Save cleaned data set
clean_df <- imputed[, 1:13]
dim(clean_df)
```

***
- Nearest neighbors tend to have similar physical traits and abilities
- Note that the kNN package outputs an extra logical column for each original variable
- The rows of each extra logical column indicates which observations were imputed for a given variable

TableOne (Prior to Matching - Part 1)
========================================================

```{r, echo = F}
# Exclude treatment and outcome variables
xvars <- colnames(clean_df)[-c(11, 12)]
# Create TableOne
smdTable <- CreateTableOne(vars = xvars[1:6], strata = "DRAFT_ROUND", data = clean_df, test = F)
print(smdTable, smd = T)
```

TableOne (Prior to Matching - Part 2)
========================================================

```{r, echo = F}
# Create TableOne
smdTable <- CreateTableOne(vars = xvars[7:11], strata = "DRAFT_ROUND", data = clean_df, test = F)
print(smdTable, smd = T)
```

Propensity Score Matching
========================================================

![Raiden and Ganyu](./Images/raidenganyu.png)

***

- Fit a logistic regression model to obtain propensity scores
- DRAFT_ROUND regressed on covariates
- Paired (nearest neighbor) matching: 401 pairs

Propensity Score Matching (R Code)
========================================================

```{r}
# Fite propensity score model
psmodel <- glm(DRAFT_ROUND ~ . - SEASON_EXP, data = clean_df, family = binomial())
# Obtain propensity scores
pscores <- psmodel$fitted.values
# Set seed before matching
set.seed(005544529)
# Propensity score, nearest neighbor (aka paired) matching
matched <- Match(Tr = clean_df$DRAFT_ROUND, M = 1, X = pscores, replace = F)
# Obtain matching indices
match_idx <- unlist(matched[c("index.treated", "index.control")])
match_df <- clean_df[match_idx, ]
dim(match_df)
```

TableOne (After Matching - Part 1)
========================================================

```{r, echo = F}
# Exclude treatment and outcome variables
xvars <- colnames(clean_df)[-c(11, 12)]
# Create TableOne
smdTable <- CreateTableOne(vars = xvars[1:6], strata = "DRAFT_ROUND", data = match_df, test = F)
print(smdTable, smd = T)
```

TableOne (After Matching - Part 2)
========================================================

```{r, echo = F}
# Create TableOne
smdTable <- CreateTableOne(vars = xvars[7:11], strata = "DRAFT_ROUND", data = match_df, test = F)
print(smdTable, smd = T)
```

Overlap Plot (Before Matching)
========================================================

```{r, echo = F}
# Plot Overlap
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hgA <- hist(pscores[clean_df$DRAFT_ROUND == 1], plot = FALSE)
hgB <- hist(pscores[clean_df$DRAFT_ROUND == 0], plot = FALSE)
plot(hgA, col = c1, main = "Overlap Plot (Before Matching)", xlab = "Propensity Scores")
plot(hgB, col = c2, add = TRUE)
lbls <- c("Treatment", "Control")
legend("topleft", inset=.02,
       lbls, fill = c(c1, c2), cex = 1, text.width = strwidth(lbls)[1]*.5)
```

Overlap Plot (After Matching)
========================================================

```{r, echo = F}
# Plot Overlap
ps_matched <- pscores[match_idx]
hgA <- hist(ps_matched[match_df$DRAFT_ROUND == 1], plot = FALSE)
hgB <- hist(ps_matched[match_df$DRAFT_ROUND == 0], plot = FALSE)
plot(hgA, col = c1, main = "Overlap Plot (After Matching)", xlab = "Propensity Scores")
plot(hgB, col = c2, add = TRUE)
lbls <- c("Treatment", "Control")
legend("topleft", inset=.02,
       lbls, fill = c(c1, c2), cex = 1, text.width = strwidth(lbls)[1]*.5)
```

Comparison of Grouped Means
========================================================

```{r, echo = F}
print("Before Matching")
# Find grouped means of outcome variable (before matching)
clean_df %>%
  group_by(DRAFT_ROUND) %>%
  summarize(mean = mean(SEASON_EXP))
print("After Matching")
# Find grouped means of outcome variable (after matching)
match_df %>%
  group_by(DRAFT_ROUND) %>%
  summarize(mean = mean(SEASON_EXP))
```

Paired t-test
========================================================

- $H_0: \mu_1 = \mu_0$ vs $H_a: \mu_1 > \mu_0$ where $\mu_1 \text{ and } \mu_0$ are the true means of the treatment and control group, respectively.

```{r, echo = F}
# Paired t-test
treated <- match_df$SEASON_EXP[match_df$DRAFT_ROUND == 1]
control <- match_df$SEASON_EXP[match_df$DRAFT_ROUND == 0]
t.test(treated, control, paired = T, alternative = "greater")
```

Sensitivity Analysis
========================================================

```{r, echo = F}
# Sensitivity Analysis
y <- rbind(clean_df[matched$index.treated, "SEASON_EXP"], clean_df[matched$index.control, "SEASON_EXP"])
treat1 <- rep(TRUE, nrow(y))
gammas <- seq(1, 2, length = 11)
pvals <- numeric(11)
for (i in 1:11) {
  sens_test <- senfm(y, treat1, gamma = gammas[i], alternative="greater")
  pvals[i] <- sens_test$pval
}
kable(data.frame(Gamma = gammas, pvals = pvals))
```

***
- General rule: conclusion changes at $\Gamma = 1.1 \implies$ highly sensitive to hidden bias
- General rule: conclusion changes at $\Gamma = 5 \implies$ robust to hidden bias
- We see that conclusions change after $\Gamma > 1.7 \implies$ not very robust to hidden bias

Matching With a Caliper - Part 1
========================================================

```{r, echo = F}
# Calculate caliper
logit <- log(pscores / (1 - pscores))
calip <- .2 * sd(logit)
# Set seed before matching
set.seed(005544529)
# Propensity score, nearest neighbor (aka paired) matching with a caliper
matched <- Match(Tr = clean_df$DRAFT_ROUND, M = 1, X = pscores, replace = F, caliper = calip)
# Obtain matching indices
match_idx <- unlist(matched[c("index.treated", "index.control")])
match_df <- clean_df[match_idx, ]
# Find SMD scores for matched data
psTable <- CreateTableOne(vars = xvars[1:6], strata = "DRAFT_ROUND", data = match_df, test = F)
print(psTable, smd = T)
```

Matching With a Caliper - Part 2
========================================================

```{r, echo = F}
# Find SMD scores for matched data
psTable <- CreateTableOne(vars = xvars[7:11], strata = "DRAFT_ROUND", data = match_df, test = F)
print(psTable, smd = T)
```

- We see a much more balanced distribution with a caliper
- $\text{Caliper} = 0.2 \times \text{sd(logit(propensity scores))}$

Overlap Plot (Before Caliper)
========================================================

```{r, echo = F}
# Plot Overlap
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hgA <- hist(pscores[clean_df$DRAFT_ROUND == 1], plot = FALSE)
hgB <- hist(pscores[clean_df$DRAFT_ROUND == 0], plot = FALSE)
plot(hgA, col = c1, main = "Overlap Plot (Before Matching)", xlab = "Propensity Scores", ylim = c(0, 80))
plot(hgB, col = c2, add = TRUE)
lbls <- c("Treatment", "Control")
legend("topleft", inset=.02,
       lbls, fill = c(c1, c2), cex = 1, text.width = strwidth(lbls)[1]*.5)
```

Overlap Plot (After Caliper)
========================================================

```{r, echo = F}
# Plot Overlap
ps_matched <- pscores[match_idx]
hgA <- hist(ps_matched[match_df$DRAFT_ROUND == 1], plot = FALSE)
hgB <- hist(ps_matched[match_df$DRAFT_ROUND == 0], plot = FALSE)
plot(hgA, col = c1, main = "Overlap Plot (After Matching - Caliper)", xlab = "Propensity Scores", ylim = c(0, 80))
plot(hgB, col = c2, add = TRUE)
lbls <- c("Treatment", "Control")
legend("topleft", inset=.02,
       lbls, fill = c(c1, c2), cex = 1, text.width = strwidth(lbls)[1]*.5)
```

Comparison of Grouped Means
========================================================

```{r, echo = F}
print("Before Matching (No Caliper)")
# Find grouped means of outcome variable (before matching)
clean_df %>%
  group_by(DRAFT_ROUND) %>%
  summarize(mean = mean(SEASON_EXP))
print("After Matching (Caliper)")
# Find grouped means of outcome variable (after matching)
match_df %>%
  group_by(DRAFT_ROUND) %>%
  summarize(mean = mean(SEASON_EXP))
```

Paired t-test
========================================================

```{r, echo = F}
# Paired t-test
treated <- match_df$SEASON_EXP[match_df$DRAFT_ROUND == 1]
control <- match_df$SEASON_EXP[match_df$DRAFT_ROUND == 0]
t.test(treated, control, paired = T, alternative = "greater")
```

Sensitivity Analysis
========================================================

```{r, echo = F}
# Sensitivity Analysis
y <- rbind(clean_df[matched$index.treated, "SEASON_EXP"], clean_df[matched$index.control, "SEASON_EXP"])
treat1 <- rep(TRUE, nrow(y))
gammas <- seq(1, 2, length = 11)
pvals <- numeric(11)
for (i in 1:11) {
  sens_test <- senfm(y, treat1, gamma = gammas[i], alternative="greater")
  pvals[i] <- sens_test$pval
}
kable(data.frame(Gamma = gammas, pvals = pvals))
```

***
- We see that conclusions change after $\Gamma > 1.4 \implies$ even more sensitive to hidden bias
- This is a bias-variance trade-off with a caliper
- By using a caliper, we lower bias but increase the variance

Conclusion
========================================================

![Chubby Raiden](./Images/raidenchubby.png)

***
- We see that, on average, players that are drafted in the first round play longer than players that are not drafted in the first round
- It should be noted that this conclusion is not very robust to hidden bias due to unaccounted confounders
